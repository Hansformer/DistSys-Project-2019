# To show the debug dialog, comment out
# INITIALIZER:
# and uncomment the following line
# if __name__=="__main__":
INITIALIZER:
    from Tkinter import *
    from DWatchGUI import DWatchGUI

    root = Tk()
    root.withdraw()
    topLevel = Toplevel(root)
    topLevel.resizable(width="NO", height="NO")
    topLevel.title("DWatch")
    g = DWatchGUI(topLevel, eventhandler)

    eventhandler.start()

    root.mainloop()
    exit()


# [DS] = default state
STATECHART:
    View [DS] [CS]
        TimerView [DS]
        ChronoView
        RefreshDisabled

    Timer [DS] [CS]
        Tick [DS]

    EditTime [CS] [DS]
        EditTimeDisabled [DS]
        EditTimeDisabledTimeout
        EditTimeEnabled
        EditTimeEnabledTimeout

    ChronoTick [DS] [CS]
        ChronoTickOn
        ChronoTickOff [DS]

    Alarm [DS] [CS]
        AlarmEnabled
        AlarmDisabled [DS]

    Light [DS] [CS]
        LightOff [DS]
        LightOn
        LightTimeout

# S = the source state of the transition.
# N = the destination state of the transition.
# E = the event that triggers the transition.
# O = a list of commands to be executed as the output of the transition. [DUMP(...)] is a predefined macro that prints a message.


TRANSITION:
    S: View.TimerView
    N: View.TimerView
    T: 1
    O:
       g.refreshTimeDisplay()

# TODO: Change time to 0.01 for final version
TRANSITION:
    S: View.ChronoView
    N: View.ChronoView
    T: 0.25
    O:
       g.refreshChronoDisplay()

TRANSITION:
    S: View.TimerView
    N: View.ChronoView
    E: changeMode
    O:
       g.refreshChronoDisplay()

TRANSITION:
    S: View.ChronoView
    N: View.TimerView
    E: changeMode
    O:
       g.refreshTimeDisplay()

TRANSITION:
    S: Timer.Tick
    N: Timer.Tick
    T: 1
    O: print "Time Tick"
       g.increaseTimeByOne()



TRANSITION:
    S: View.TimerView
    N: View.RefreshDisabled
    E: editTimeEvent

TRANSITION:
    S: View.RefreshDisabled
    N: View.TimerView
    E: editTimeEvent
    O: g.stopSelection()


TRANSITION:
    S: EditTime.EditTimeDisabled
    N: EditTime.EditTimeEnabledTimeout
    C: [INSTATE("View.TimerView")]
    E: editTime

TRANSITION:
    S: EditTime.EditTimeEnabledTimeout
    N: EditTime.EditTimeEnabled
    T: 1.5
    O: [EVENT("editTimeEvent")]
       g.startSelection()
       print "Time edit mode enabled"

TRANSITION:
    S: EditTime.EditTimeEnabledTimeout
    N: EditTime.EditTimeDisabled
    C: [INSTATE("View.TimerView")]
    E: released

TRANSITION:
    S: EditTime.EditTimeEnabled
    N: EditTime.EditTimeEnabled
    E: initChrono
    O: g.selectNext()

TRANSITION:
    S: EditTime.EditTimeEnabled
    N: EditTime.EditTimeEnabled
    E: increase
    O: g.increaseSelection()

TRANSITION:
    S: EditTime.EditTimeEnabled
    N: EditTime.EditTimeDisabledTimeout
    C: [INSTATE("View.RefreshDisabled")]
    E: editTime

TRANSITION:
    S: EditTime.EditTimeDisabledTimeout
    N: EditTime.EditTimeDisabled
    T: 2
    O: [EVENT("editTimeEvent")]

TRANSITION:
    S: EditTime.EditTimeDisabledTimeout
    N: EditTime.EditTimeEnabled
    C: [INSTATE("View.RefreshDisabled")]
    E: released

TRANSITION:
    S: ChronoTick.ChronoTickOff
    N: ChronoTick.ChronoTickOn
    E: initChrono
    
TRANSITION:
    S: ChronoTick.ChronoTickOn
    N: ChronoTick.ChronoTickOff
    E: initChrono

# TODO: Change time to 0.01 for final version
TRANSITION:
    S: ChronoTick.ChronoTickOn
    N: ChronoTick.ChronoTickOn
    T: 0.25
    O: print "Chrono Tick"
       g.increaseChronoByOne()

TRANSITION:
    S: ChronoTick.ChronoTickOff
    N: ChronoTick.ChronoTickOff
    E: resetChrono
    O: g.resetChrono()


TRANSITION:
    S: Alarm.AlarmEnabled
    N: Alarm.AlarmDisabled
    C: [INSTATE("View.TimerView")]
    E: setAlarm
    O: g.setAlarm()
       print "Alarm disabled"

TRANSITION:
    S: Alarm.AlarmDisabled
    N: Alarm.AlarmEnabled
    C: [INSTATE("View.TimerView")]
    E: setAlarm
    O: g.setAlarm()
       print "Alarm enabled"

TRANSITION:
    S: Light.LightOff
    N: Light.LightOn
    E: lightOn
    O: print "set light on"
       g.setIndiglo()

TRANSITION:
    S: Light.LightOn
    N: Light.LightTimeout
    E: lightOff
    O: print "Timeout for turning light off"

TRANSITION:
    S: Light.LightTimeout
    N: Light.LightOff
    T: 2 [OTT]
    O: g.unsetIndiglo()
       print "Light turned off"
